name: Terraform Deployment

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
    paths:
      - 'terraform/**'  # Trigger only if there are changes in the terraform directory
      - 'ansible/**'  # Trigger only if there are changes in the ansible directory
      - '.github/workflows/deploy.yml'  # Trigger only if there are changes to the deploy.yml workflow file

jobs:
  full_deployment:
    runs-on: ubuntu-latest  # The GitHub runner machine

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    # Step 3: Set up AWS credentials
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 3: Create the S3 bucket
    - name: Create S3 Bucket
      run: |
        BUCKET_NAME="divyankm-gitops-my-unique-terraform-state-bucket"
        aws s3 mb s3://$BUCKET_NAME || echo "Bucket already exists"
        while ! aws s3 ls s3://$BUCKET_NAME; do
          echo "Waiting for the S3 bucket to be created..."
          sleep 5  # Check every 5 seconds
        done
        echo "S3 bucket $BUCKET_NAME is now available!"

    # Step 4: Create DynamoDB table for state locking and wait until it's created
    - name: Create DynamoDB Table
      run: |
        TABLE_NAME="terraform-locks"
        aws dynamodb create-table \
          --table-name $TABLE_NAME \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST \
          --region ap-south-1 || echo "Table already exists"
        while ! aws dynamodb describe-table --table-name $TABLE_NAME; do
          echo "Waiting for DynamoDB table $TABLE_NAME to be created..."
          sleep 5  # Check every 5 seconds
        done

    - name: Authenticate GitHub CLI
      run: |
        echo "${{ secrets.GH_TOKEN }}" | gh auth login --with-token

    - name: Generate and Upload SSH Key to AWS (if not exists) and Upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        key_exists=$(aws ec2 describe-key-pairs --query "KeyPairs[?KeyName=='gitops_key'].KeyName" --region $AWS_REGION --output text)
        if [ "$key_exists" != "gitops_key" ]; then
          echo "Key pair 'gitops_key' does not exist, creating it..."
          ssh-keygen -t rsa -b 4096 -f gitops_key -q -N ""
          public_key=$(cat gitops_key.pub)
          encoded_key=$(echo -n "$public_key" | base64)
          aws ec2 import-key-pair --key-name "gitops_key" --public-key-material "$encoded_key" --region $AWS_REGION
          aws s3 cp gitops_key s3://divyankm-gitops-my-unique-terraform-state-bucket/keys/gitops_key --region $AWS_REGION
          aws s3 cp gitops_key.pub s3://divyankm-gitops-my-unique-terraform-state-bucket/keys/gitops_key.pub --region $AWS_REGION
          echo "SSH keys have been uploaded to S3."
          secret_exists=$(gh secret list --repo ${{ github.repository }} --json name --jq '.[] | select(.name=="SSH_PRIVATE_KEY")')
          if [ -z "$secret_exists" ]; then
            ssh_private_key=$(cat gitops_key)
            gh secret set SSH_PRIVATE_KEY --body "$ssh_private_key"
            echo "SSH private key has been added to GitHub Secrets."
          else
            echo "Secret 'SSH_PRIVATE_KEY' already exists, skipping key creation."
          fi
        else
          echo "Secret 'SSH_PRIVATE_KEY' already exists, skipping key creation."
        fi

    # Step 6: Initialize Terraform for the main infrastructure (using created backend)
    - name: Terraform Init (Main Configuration)
      run: |
        terraform init
      working-directory: ./terraform

    # Step 6: Run Terraform Plan to check changes
    - name: Terraform Plan
      run: terraform plan
      working-directory: ./terraform

    # Step 7: Apply Terraform configuration to create infrastructure
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./terraform

    - name: Capture EC2 Public IP
      id: capture_ip
      run: |
        EC2_PUBLIC_IP=$(terraform output ec2_instance_public_ip)
        echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV
        echo "Captured EC2 Public IP: $EC2_PUBLIC_IP"
      working-directory: ./terraform

    # Install Ansible in CICD Runner Pipeline: 
    - name: Install Ansible & Then Associated Apps to EC2 
      run: |
        sudo apt-get install -y ansible

    - name: Install EC2 Apps using Ansible
      run: |
        echo "[web]" > inventory
        echo "$EC2_PUBLIC_IP" >> inventory  # Use the environment variable here
        echo "$SSH_PRIVATE_KEY" > /tmp/id_rsa
        chmod 600 /tmp/id_rsa  # Secure the private key file
        ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory ansible/install_apps.yml --private-key /tmp/id_rsa -u ${{ secrets.SSH_USERNAME }}
      env:
        EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}  # Ensure the environment variable is passed to Ansible
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # Add the private key as an environment variable

    # Step 8: Build and push Docker image to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username from GitHub secrets
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password from GitHub secrets

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/yii2-app:latest .
        
    - name: Push Docker image to Docker Hub
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/yii2-app:latest

    # Step 9: Log in to EC2 and Deploy Docker container as a Swarm service
    - name: Log in to EC2 and deploy Docker container
      run: |
        echo "${SSH_PRIVATE_KEY}" > /tmp/id_rsa
        chmod 600 /tmp/id_rsa
            
        echo "Connecting to EC2: $SSH_USERNAME@$EC2_PUBLIC_IP"
        ssh -i /tmp/id_rsa -o StrictHostKeyChecking=no -T "$SSH_USERNAME@$EC2_PUBLIC_IP" << EOF
          echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin

          docker swarm init || echo "Swarm is already initialized"
          docker service rm yii2-app || echo "No existing service to remove"
          docker service create \
              --name yii2-app \
              --replicas 1 \
              --publish 8080:80 \
              ${DOCKER_USERNAME}/yii2-app:latest
        EOF
      shell: bash
      env:
        SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        EC2_PUBLIC_IP: ${{ env.EC2_PUBLIC_IP }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
